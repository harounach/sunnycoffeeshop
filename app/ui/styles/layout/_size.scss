@use "sass:map";
@use "../abstracts/variables" as vars;
@use "../abstracts/mixins";

$widthMap: map.get(vars.$sizes, "w");
$heightMap: map.get(vars.$sizes, "h");
$maxWidthMap: map.get(vars.$sizes, "mw");
$maxHeightMap: map.get(vars.$sizes, "mh");

// width
@each $w in map.keys($widthMap) {
  .w-#{$w} {
    width: map.get($widthMap, $w);
  }
}

// width breakpoint
@each $breakpoint in map.keys(vars.$breakpoints) {
  @include mixins.breakpoint($breakpoint) {
    @each $w in map.keys($widthMap) {
      .w-#{$breakpoint}-#{$w} {
        width: map.get($widthMap, $w);
      }
    }
  }
}

// height
@each $h in map.keys($heightMap) {
  .h-#{$h} {
    height: map.get($heightMap, $h);
  }
}

// height breakpoint
@each $breakpoint in map.keys(vars.$breakpoints) {
  @include mixins.breakpoint($breakpoint) {
    @each $h in map.keys($heightMap) {
      .h-#{$breakpoint}-#{$h} {
        height: map.get($heightMap, $h);
      }
    }
  }
}

// max-width
@each $mw in map.keys($maxWidthMap) {
  .mw-#{$mw} {
    max-width: map.get($maxWidthMap, $mw);
  }
}

// max-width breakpoint
@each $breakpoint in map.keys(vars.$breakpoints) {
  @include mixins.breakpoint($breakpoint) {
    @each $mw in map.keys($maxWidthMap) {
      .mw-#{$breakpoint}-#{$mw} {
        max-width: map.get($maxWidthMap, $mw);
      }
    }
  }
}

// max-height
@each $mh in map.keys($maxHeightMap) {
  .mh-#{$mh} {
    max-height: map.get($maxHeightMap, $mh);
  }
}

// max-height breakpoint
@each $breakpoint in map.keys(vars.$breakpoints) {
  @include mixins.breakpoint($breakpoint) {
    @each $mh in map.keys($maxHeightMap) {
      .mh-#{$breakpoint}-#{$mh} {
        max-height: map.get($maxHeightMap, $mh);
      }
    }
  }
}