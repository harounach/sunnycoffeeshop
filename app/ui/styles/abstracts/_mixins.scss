@use "sass:map";
@use "./variables" as vars;

// Apply light theme
@mixin applyLightTheme {
  @content;
}

// Apply dark theme
@mixin applyDarkTheme {
  @content;
}

// Display large
@mixin displayLargeText {
  font-family: var(--font-philosopher); // Philosopher
  font-weight: 700;
  font-size: vars.$font-size-7; // 48px
  line-height: 1.4;
}

// Display base
@mixin displayBaseText {
  font-family: vars.$font-serif; // Philosopher
  font-weight: 700;
  font-size: vars.$font-size-6; // 40px
  line-height: 1.4;
}

// Title large
@mixin titleLargeText {
  font-family: vars.$font-serif; // Philosopher
  font-weight: 700;
  font-size: vars.$font-size-5; // 32px
  line-height: 1.7;
}

// Title medium
@mixin titleMediumText {
  font-family: vars.$font-serif; // Philosopher
  font-weight: 700;
  font-size: vars.$font-size-4; // 24px
  line-height: 1.7;
}

// Title base
@mixin titleBaseText {
  font-family: vars.$font-serif; // Philosopher
  font-weight: 700;
  font-size: vars.$font-size-2; // 18px
  line-height: 1.7;
}

// button
@mixin buttonText {
  font-family: vars.$font-serif; // Philosopher
  font-weight: 400;
  font-size: vars.$font-size-2; // 18px
  line-height: 1.7;
}

// Body large
@mixin bodyLargeText {
  font-family: vars.$font-sans; // Poppins
  font-weight: 400;
  font-size: vars.$font-size-2; // 18px
  line-height: 1.7;
}

// Body base
@mixin bodyBaseText {
  font-family: vars.$font-sans; // Poppins
  font-weight: 400;
  font-size: vars.$font-size-1; // 16px
  line-height: 1.7;
}

@mixin z-index($key, $ns: false) {
  @if $ns {
    $map: map.get(vars.$z-indexes, $ns);
    z-index: map.get($map, $key);
  } @else {
    z-index: map.get(vars.$z-indexes, $key);
  }
}

// Responsive media queries.
// possible values: sm, md, lg, xl
@mixin breakpoint($breakpoint) {
  @if $breakpoint == "" {
    @content;
  } @else {
    // Retrieves the value from the key
    $value: map.get(vars.$breakpoints, $breakpoint);

    // If the key exists in the map
    @if $value != null {
      // Prints a media query based on the value
      @media (min-width: $value) {
        @content;
      }
    }

    // If the key doesn't exist in the map
    @else {
      @warn 'Unfortunately, no value could be retrieved from `#{$breakpoint}`. '
        + 'Please make sure it is defined in `$breakpoints` map.';
    }
  }
}

// Responsive media queries.
// possible values: variable
@mixin breakpoint-x($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

// Clear fix for float elements
@mixin clearfix() {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

// container
@mixin container() {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}
